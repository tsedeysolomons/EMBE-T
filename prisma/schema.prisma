// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  CONDUCTOR
  USER
}

enum UserType {
  PASSENGER
  GUEST
}

model User {
  id          Int           @id @default(autoincrement())
  type        UserType
  title       String
  firstName   String        @map("first_name")
  middleName  String?       @map("middle_name")
  lastName    String        @map("last_name")
  country     String
  email       String        @unique
  phone       String
  // For a PASSENGER, you might require a password and role.
  // For a GUEST, these can be left null.
  
  dateOfBirth  DateTime?      @map("date_of_birth")
  password    String?       
  role        Role?         @default(USER)
  createdAt   DateTime      @default(now())
  reservations Reservation[]
  eTickets     ETicket[]
}

model Conductor {
  id        Int     @id @default(autoincrement())
  username  String
  password  String
  name      String
  contactNo String
  address   String?
}

model Admin {
  id        Int     @id @default(autoincrement())
  username  String
  password  String
  name      String
  email     String  @unique
  contactNo String?
  role      String  @default("Admin") // Super Admin, Regional Admin
  trains    Train[]
}

model Train {
  id             Int           @id @default(autoincrement())
  name           String
  trainNo        Int           @unique
  startStation   String        // Starting station
  endStation     String        // Ending station
  stops          Json?         // List of intermediate stops (optional)
  departureDate  DateTime
  arrivalDate    DateTime
  type           String        // e.g., "Express", "Local", "Freight"
  status         String        // e.g., "On-Time", "Delayed", "Cancelled"
  HardSeatPrice  Float         // Price for Economy class
  HardSleepPrice Float         // Price for Business class
  capacity       Int
  reservations   Reservation[]
  eTickets       ETicket[]
  adminId        Int
  admin          Admin         @relation(fields: [adminId], references: [id])
}

model Reservation {
  id                Int        @id @default(autoincrement())
  trainId           Int
  ticketNo          String
  startStation      String      // Starting station
  endStation        String      // Ending station
  departureDate     DateTime
  arrivalDate       DateTime
  dateOfReservation DateTime
  setNo             Int
  class             String
  status            String     @default("Pending") // Confirmed, Cancelled, Pending
  referenceCode     String     @unique             // A unique code for tracking
  userId            Int
  user              User       @relation(fields: [userId], references: [id])
  train             Train      @relation(fields: [trainId], references: [id])
  Payment           Payment?
  
  @@index([userId])
}
model ETicket {
  id              Int        @id @default(autoincrement())
  ticketNo        String     @unique
  userId          Int
  trainId         Int
  setNo           Int
  class           String
  journeyDate     DateTime
  departureStatus String
  ticketPrice     Int
  bookingInfo     String
  train           Train      @relation(fields: [trainId], references: [id])
  user            User       @relation(fields: [userId], references: [id])
  payment         Payment?   @relation(fields: [paymentId], references: [id])
  paymentId       Int?
}


model Payment {
  id                Int                @id @default(autoincrement())
  paymentType       String
  paymentAmount     Float
  paymentDate       DateTime
  currency          String             @default("ETB")
  status            String
  reservationId     Int                @unique
  reservation       Reservation        @relation(fields: [reservationId], references: [id])
  onlineTransaction OnlineTransaction?
  ETicket           ETicket[]
  tx_ref            String
}

model OnlineTransaction {
  id        Int      @id @default(autoincrement())
  ticketId  String
  amount    Float
  status    String
  date      DateTime
  paymentId Int      @unique
  payment   Payment  @relation(fields: [paymentId], references: [id])
}